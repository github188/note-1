Utils = require 'utils'
exports.renderCmd = ( javapath, options )->
	packageName = Utils.getPackageByPath javapath #包名
	javaName = Utils.getJavaNameByPath javapath #类名
	serviceName = javaName.substring( 0, 1 ).toLowerCase() + javaName.substring( 1 )
	jsppath = options.FUNCTION.toLowerCase() + '/' + ( Utils.getJspName options.FUNCTION ) #返回jsp路径
	return """
		package #{packageName};

		import java.util.HashMap;
		import java.util.Map;
		import java.util.List;

		import javax.servlet.http.HttpServletRequest;
		import javax.servlet.http.HttpServletResponse;

		import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;
		import org.loushang.util.IErrorHandler;
		import org.loushang.util.IMessageHandler;
		import org.loushang.waf.mvc.ViewHelper;

		import com.v6.base.bsp.V6BspInfo;
		import com.v6.base.cmd.BaseCommandImpl;
		import com.v6.imr.tool.RepSendJson;

		/**
		* xxxxxx功能基础类
		* #{new Date().toLocaleString()} by zhangwj
		*/
		public class #{javaName}Cmd extends BaseCommandImpl{

			private static final long serialVersionUID = 1L;
			private Log log = LogFactory.getLog(#{javaName}Cmd.class);

			private I#{javaName}Service #{serviceName}Service = null;
			public I#{javaName}Service get#{javaName}Service() {
				return #{serviceName}Service;
			}

			public void set#{javaName}Service(I#{javaName}Service #{serviceName}Service) {
				this.#{serviceName}Service = #{serviceName}Service;
			}

			//主页跳转
			public String main(HttpServletRequest req, HttpServletResponse rep,
					IErrorHandler errorHandler, IMessageHandler messageHandler,
					ViewHelper viewHelper){
				return "#{jsppath}";
			}
			
			//获取数据
			public void get#{javaName}Data(HttpServletRequest req, HttpServletResponse rep,
					IErrorHandler errorHandler, IMessageHandler messageHandler,
					ViewHelper viewHelper){
				Map rtnMap = new HashMap();
				try{
					Map viewin = ( Map )viewHelper.getView();
					String icomId = V6BspInfo.getIndustryComId();
					viewin.put( "icomId", icomId );
					List datas = get#{javaName}Service().get#{javaName}Data( viewin );
					rtnMap.put( "ok", true );
					rtnMap.put( "data", datas );
				}catch( Exception e ){
					rtnMap.put( "ok", false );
					rtnMap.put( "msg", e.toString() );
					if( log.isErrorEnabled() ){
						log.error( "calc#{javaName} error",e );
					}
				}finally{
					RepSendJson.sendJson( rtnMap ,rep );
				}
			}
		}
	"""

exports.renderIService = ( javapath, options )->
	packageName = Utils.getPackageByPath javapath #包名
	javaName = Utils.getJavaNameByPath javapath #类名
	return """
		package #{packageName};
		import java.util.List;
		import java.util.Map;
		
		/**
		* xxxxxx功能服务接口
		* #{new Date().toLocaleString()} by zhangwj
		*/
		public interface I#{javaName}Service{
			//获取数据
			public List get#{javaName}Data( Map beanMap );
			//业务处理
			public void doCalc( Map beanMap );
		}
	"""

exports.renderIDomain = ( javapath, options )->
	packageName = Utils.getPackageByPath javapath #包名
	javaName = Utils.getJavaNameByPath javapath #类名
	return """
		package #{packageName};
		import java.util.List;
		import java.util.Map;
		
		/**
		* xxxxxx功能业务接口类
		* #{new Date().toLocaleString()} by zhangwj
		*/
		public interface I#{javaName}Domain{
			//获取数据
			public List get#{javaName}Data( Map beanMap );
			//业务处理
			public void doCalc( Map beanMap );
		}
	"""
	
exports.renderService = ( javapath, options )->
	packageName = Utils.getPackageByPath javapath #包名
	javaName = Utils.getJavaNameByPath javapath #类名
	serviceName = javaName.substring( 0, 1 ).toLowerCase() + javaName.substring( 1 )
	return """
		package #{packageName};
		
		import java.util.List;
		import java.util.Map;
		import org.springframework.transaction.TransactionStatus;
		import org.springframework.transaction.support.TransactionCallbackWithoutResult;
		import com.v6.base.service.BaseServiceImpl;
		
		/**
		* xxxxxx服务基础类
		* #{new Date().toLocaleString()} by zhangwj
		*/
		public class #{javaName}Service  extends BaseServiceImpl implements I#{javaName}Service{
			I#{javaName}Domain #{serviceName}Domain = null;
			
			public I#{javaName}Domain get#{javaName}Domain() {
				return #{serviceName}Domain;
			}

			public void set#{javaName}Domain(I#{javaName}Domain #{serviceName}Domain) {
				this.#{serviceName}Domain = #{serviceName}Domain;
			}

			public List get#{javaName}Data( Map beanMap ){
				return get#{javaName}Domain().get#{javaName}Data( beanMap );
			}
			
			public void doCalc( final Map beanMap ){
				getTransactionTemplate().execute(
					new TransactionCallbackWithoutResult() {
						protected void doInTransactionWithoutResult(
								TransactionStatus arg0) {
							get#{javaName}Domain().doCalc( beanMap );
						}
					});
			}
	
			@Override
			protected void initService() {
				// TODO Auto-generated method stub
			}
		}
	"""

exports.renderDomain = ( javapath, options )->
	packageName = Utils.getPackageByPath javapath #包名
	javaName = Utils.getJavaNameByPath javapath #类名
	return """
		package #{packageName};
		import java.util.List;
		import java.util.Map;

		import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;

		import com.lc.v6.jdbc.mybatis.V6SqlSessionUtil;
		import com.v6.base.domain.BaseDomainImpl;

		/**
		* xxxxxx业务实现类
		* #{new Date().toLocaleString()} by zhangwj
		*/
		public class #{javaName}Domain extends BaseDomainImpl implements I#{javaName}Domain {

			private static Log log = LogFactory.getLog(#{javaName}Domain.class);
			
			public List get#{javaName}Data( Map beanMap ){
				return V6SqlSessionUtil.getSqlSession().selectList( "#{javaName}Domain.get#{javaName}DomainData", beanMap);
			}

			public void doCalc( Map beanMap ){
				//TODO
			}

			@Override
			protected void initDomain() {
				// TODO Auto-generated method stub
			}
		}
	"""
	
exports.renderSqlMap = ( javapath, options )->
	javaName = Utils.getJavaNameByPath javapath #类名
	return """
		<?xml version="1.0" encoding="UTF-8" ?>
		<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		<mapper namespace="#{javaName}Domain">
			<select id="get#{javaName}DomainData" parameterType="map" resultType="map">
			</select>
		</mapper>
	"""