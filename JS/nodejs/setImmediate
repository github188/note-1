node.js 0.9之后，任何异步递归都应用setImmediate而非process.nextTick！setImmediate和process.nextTick的区别是：前者将defer到队列末，且不会生成call stack；
而后者是defer到该函数结束后执行，且process.nextTick用于递归会报警并最后爆盏…至于setInterval(func,0)就别用了，那是浏览器技巧。

你可以在最新版本的node下试试如下的代码:

function recurse(i,end){
if(i>end)
{
	console.log('Done!');
}
else
{
	console.log(i);
	process.nextTick(recurse(i+1,end));
}
}

recurse(0,99999999);

执行几次后马上就 RangeError: Maximum call stack size exceeded

然后换用setImmediate:

function recurse(i,end){
if(i>end)
{
	console.log('Done!');
}
else
{
	console.log(i);
	setImmediate(recurse,i+1,end);
}
}

recurse(0,99999999);

就完全没问题！

这是因为setImmediate不会生成call stack，异步的递归必须用它。