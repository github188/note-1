1、javascrpit 运行时概念
	https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop
	一个 JavaScript 运行时包含了一个待处理的消息队列。每一个消息都与一个函数相关联。当栈为空时，从队列中取出一个消息进行处理。这个处理过程包含了
调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧）。当栈再次为空的时候，也就意味着消息处理结束。

2、 大多数浏览器（比如chrome）让一个单线程共用于执行javascrip和更新用户界面。这个线程通常被称为“浏览器UI线程”， 每个时刻只能执行其中一种操作，
这意味着当Javascript代码正在执行时用户界面无法响应输入，反之亦然。这样做是因为javascript代码的作用就是操作DOM更新用户界面，用同一个线程来做负
责这两件事情可以更高效

3、一般而言，<script>标签每次出现都会霸道地让页面等待脚本的解析和执行，无论当前的Javascript是内嵌的还是包含了外链文件，页面的下载和渲染都必须
停下来等待脚本执行完成。这在页面的生存周期中是必要的，因为脚本执行过程中可能修改页面内容，一个典型的例子就是在页面中使用document.write()。

4、无阻塞脚本
	现在比较常用的方法就是动态加载执行脚本。原理是通过DOM，你几乎可以用Javascript动态创建HTML中的所有内容，其根本在于，<script>标签与页面中其
他元素并无差异：都能通过DOM引用，都能在文档中移动，删除和创建。在该<script>元素被添加到页面时，它不会阻止其他文件下载，只在执行阶段阻塞渲染。
特别强调：《高性能javascript》一文中说“这种技术的重点在于：无论何时启动下载，文件的下载和执行都不会阻塞页面其他进程”，这并不是说它在执行
不会阻塞其他javascript代码，而是要强调不会阻塞其他资源的下载等其他任务。




rendering_engine
	https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#The_rendering_engine