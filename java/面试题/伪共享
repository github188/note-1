在核心1上运行的线程想更新变量X，同时核心2上的线程想要更新变量Y。不幸的是，这两个变量在同一个缓存行中。每个线程都要去竞争缓存行的所有权来更新变量。
如果核心1获得了所有权，缓存子系统将会使核心2中对应的缓存行失效。当核心2获得了所有权然后执行更新操作，核心1就要使自己对应的缓存行失效。
这会来来回回的经过L3缓存，大大影响了性能。如果互相竞争的核心位于不同的插槽，就要额外横跨插槽连接，问题可能更加严重。

伪共享指的是多线程在对不同变量进行修改操作时，如果变量位于同一个缓存行，当多线程竞争缓存行所有权时，每个核都同时对缓存行进行修改，
缓存子系统将会使其他核的缓存行失效导致cache miss，最后升级到L3缓存进行修改，最后大大影响程序的执行效率，
如果竞争的核不在同一个cpu插槽即不共享L3缓存，那就会去内存中进行修改，这样引起的问题就是伪共享问题。
