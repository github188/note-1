$ echo "19-8-15"|awk 'BEGIN{FS="-"}{for(i=1;i<NF;i++){printf("%02d-",$i)}print $i}'
19-08-15


echo "112 110 113 110 115 210 110" | awk -vRS='[[:space:]]+' '!a[$0]++' ORS=" "

awk -F '/' '/gmnt/ {count[$3]++}END{for(x in count) print x,count[x]}' a.log 
ddd 2
data 1
bbb 1

AWK是一种优良的文本处理工具。它不仅是 Linux 中也是任何环境中现有的功能最强大的数据处理引擎之一。这种编程及数据操作语言（其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母）的最大功能取决于一个人所拥有的知识。AWK 提供了极其强大的功能：可以进行样式装入、流控制、数学运算符、进程控制语句甚至于内置的变量和函数。它具备了一个完整的语言所应具有的几乎所有精美特性。实际上 AWK 的确拥有自己的语言：AWK 程序设计语言， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。
最简单地说， AWK 是一种用于处理文本的编程语言工具。AWK 在很多方面类似于 shell 编程语言，尽管 AWK 具有完全属于其本身的语法。它的设计思想来源于 SNOBOL4 、sed 、Marc Rochkind设计的有效性语言、语言工具 yacc 和 lex ，当然还从 C 语言中获取了一些优秀的思想。在最初创造 AWK 时，其目的是用于文本处理，并且这种语言的基础是，只要在输入数据中有模式匹配，就执行一系列指令。该实用工具扫描文件中的每一行，查找与命令行中所给定内容相匹配的模式。如果发现匹配内容，则进行下一个编程步骤。如果找不到匹配内容，则继续处理下一行。
尽管操作可能会很复杂，但命令的语法始终是：
awk '{pattern + action}' 或者 awk 'pattern {action}'
其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号 ({}) 不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。
gawk 是 AWK 的 GNU 版本。
一般的UNIX作业系统，本身即附有AWK，不同的UNIX作业系统所附的AWK其版本亦不尽相同，若读者所使用的系统上未附有AWK，可通过 anonymous ftp 到下列地方取得：
phi./pub/gnu
ftp/UNIX/gnu
preppub/gnu
注 解：一种编程语言，因其模式匹配语法而特别有用，通常用于数据检索和数据转换。一个GNU版本称为Gawk。
2调用方式
编辑

awk提供了适应多种需要的不同解决方案，它们是：
一、 awk命令行，你可以象使用普通UNIX命令一样使用awk，在命令行中你也可以使用awk程序设计语言，虽然awk支持多行的录入，但是录入长长的命令行并保证其正确无误却是一件令人头疼的事，因此，这种方法一般只用于解决简单的问题。当然，你也可以在shell script程序中引用awk命令行甚至awk程序脚本。
二、使用-f选项调用awk程序。awk允许将一段awk程序写入一个文本文件，然后在awk命令行中用-f选项调用并执行这段程序。具体的方法我们将在后面的awk语法中讲到。
三、利用命令解释器调用awk程序：利用UNIX支持的命令解释器功能，我们可以将一段awk程序写入文本文件，然后在它的第一行加上：
#!/bin/awk -f
并赋予这个文本文件以执行的权限。这样做之后，你就可以在命令行中用类似于下面这样的方式调用并执行这段awk程序了。
awk脚本文本名 待处理文件
语法

与其它UNIX命令一样，awk拥有自己的语法：
awk [ -F re] [parameter...] ['prog'] [-f progfile]
参数说明：
-F re：允许awk更改其字段分隔符。
parameter: 该参数帮助为不同的变量赋值。
'prog': awk的程序语句段。这个语句段必须用单拓号：'和'括起，以防被shell解释。这个程序语句段的标准形式为：
'pattern {action}'
其中pattern参数可以是egrep正则表达式中的任何一个，它可以使用语法/re/再加上一些样式匹配技巧构成。与sed类似，你也可以使用"," 分开两样式以选择某个范围。关于匹配的细节，你可以参考附录，如果仍不懂的话，找本UNIX书学学grep和sed（本人是在学习ed时掌握匹配技术的）。action参数总是被大括号包围，它由一系列awk语句组成，各语句之间用";"分隔。awk解释它们，并在pattern给定的样式匹配的记录上执行其操作。与shell类似，你也可以使用“#”作为注释符，它使“#”到行尾的内容成为注释，在解释执行时，它们将被忽略。你可以省略pattern和 action之一，但不能两者同时省略，当省略pattern时没有样式匹配，表示对所有行（记录）均执行操作，省略action时执行缺省的操作——在标准输出上显示。
-f progfile：允许awk调用并执行progfile指定有程序文件。progfile是一个文本文件，他必须符合awk的语法。
in_file:awk的输入文件，awk允许对多个输入文件进行处理。值得注意的是awk不修改输入文件。如果未指定输入文件，awk将接受标准输入，并将结果显示在标准输出上。awk支持输入输出重定向。
内置变量

前面说过，awk处理的工作与数据库的处理方式有相同之处，其相同处之一就是awk支持对记录和字段的处理，其中对字段的处理是grep和sed不能实现的，这也是awk优于二者的原因之一。在awk中，缺省的情况下总是将文本文件中的一行视为一个记录，而将一行中的某一部分作为记录中的一个字段。为了操作这些不同的字段，awk借用shell的方法，用1,2,3...这样的方式来顺序地表示行（记录）中的不同字段。特殊地，awk用0表示整个行（记录）。不同的字段之间是用称作分隔符的字符分隔开的。系统默认的分隔符是空格。awk允许在命令行中用-F re的形式来改变这个分隔符。事实上，awk用一个内置的变量RS来记忆这个分隔符。awk中有好几个这样的内置变量，例如，记录分隔符变量RS、当前工作的记录数NR等等，本文后面的附表列出了全部的内置变量。这些内置的变量可以在awk程序中引用或修改，例如，你可以利用NR变量在模式匹配中指定工作范围，也可以通过修改记录分隔符RS让一个特殊字符而不是换行符作为记录的分隔符。
例：显示文本文件myfile中第七行到第十五行中以字符%分隔的第一字段，第三字段和第七字段：
awk -F % 'NR>=7,NR<=15 {print $1 $3 $7}' myfile
内置变量介绍

awk提供了有很多内置变量，如果你经常使用awk处理文本，了解这些这些内置变量的使用是很有必要的。下面看一下这些内置变量的详细介绍。
ARGC命令行参数个数（不包括awk的选项和awk的程序内容）。
ARGIND 当前正在处理的ARGV中的文件的索引值（同时处理多个文件时会用到）。
ARGV 命令行参数序列数组，下标从0开始。
CONVFMT 数字转换格式，和C语言中的数字输出格式化类似，默认为"%.6g"。
ENVIRON 当前系统的环境变量。
ERRNO 出错时的错误信息。
FIELDWIDTHS 以空格分隔的字段宽度，如果指定此变量，awk将会用指定的宽度替换变量FS指定的分隔符。看下面的例子：
[LinuxSong@test /tmp]$ cat t
abcdefasfa
abcdefasfa
abcdefasfa
[LinuxSong@test /tmp]$ awk 'BEGIN {FIELDWIDTHS="2 3 4"}{print $1,$2,$3}' t
ab cde fasf
ab cde fasf
ab cde fasf
FILENAME 当前正在处理的文件名，该变量不能在BEGIN块中使用。
FNR当前处理的记录号。
FS 字段的分隔符，默认为空格。
IGNORECASE 如果该变量设置为非0值，在进行字符串匹配时忽略大小写。
NF 当前记录中的字段个数。
NR 已经读出的记录数。
OFMT 数字的输出格式。
OFS 输出的字段分隔符，默认为空格。
ORS 输出的记录分隔符，默认为新行。
RS 输入记录的分隔符，默认为新行。
RSTART 被match（）函数匹配的字符串的起始位置，如果没有匹配则为0（从1开始）。
RLENGTH 被match（）函数匹配的字符串的长度。
SUBSEP数组中多个下标的分隔符，默认为"\034"。
内置函数

awk 之所以成为一种优秀的程序设计语言的原因之一是它吸收了某些优秀的程序设计语言（例如C）语言的许多优点。这些优点之一就是内置函数的使用，awk定义并支持了一系列的内置函数，由于这些函数的使用，使得awk提供的功能更为完善和强大，例如，awk使用了一系列的字符串处理内置函数(这些函数看起来与C 语言的字符串处理函数相似，其使用方式与C语言中的函数也相差无几)，正是由于这些内置函数的使用，使awk处理字符串的功能更加强大。本文后面的附录中列有一般的awk所提供的内置函数，这些内置函数也许与你的awk版本有些出入，因此，在使用之前，最好参考一下你的系统中的联机帮助。
内置的字符串函数
gsub(r,s)
在整个$0中用s代替r
gsub(r,s,t)
在整个t中用s替代r
index(s,t)
返回s中字符串t的第一位置
length(s)
返回s长度
match(s,r)
测试s是否包含匹配r的字符串
split(s,a,fs)
在fs上将s分成序列a
sprint(fmt,exp)
返回经fmt格式化后的exp
sub(r,s)
用$0中最左边最长的子串代替s
substr(s,p)
返回字符串s中从p开始的后缀部分
substr(s,p,n)
返回字符串s中从p开始长度为n的后缀部分
gsub函数有点类似于sed查找和替换。它允许替换一个字符串或字符为另一个字符串或字符，并以正则表达式的形式执行。第一个函数作用于记录$0，第二个gsub函数允许指定目标，然而，如果未指定目标，缺省为$0。
index(s，t）函数返回目标字符串s中查询字符串t的首位置。length函数返回字符串s字符长度。
match函数测试字符串s是否包含一个正则表达式r定义的匹配。
split使用域分隔符fs将字符串s划分为指定序列a。
sprint函数类似于printf函数，返回基本输出格式fmt的结果字符串exp。
sub(r，s）函数将用s替代$0中最左边最长的子串，该子串被r匹配。
substr(s，p）返回字符串s在位置p后的后缀。
substr(s，p，n）同上，并指定子串长度为n。
3使用
编辑

命令行

按照顺序，我们应当讲解awk程序设计的内容了，但在讲解之前，我们将用一些例子来对前面的知识进行回顾，这些例子都是在命令行中使用的，由此我们可以知道在命令行中使用awk是多么的方便。这样做的原因一方面是为下面的内容作铺垫，另一方面是介绍一些解决简单问题的方法，我们完全没有必要用复杂的方法来解决简单的问题----既然awk提供了较为简单的方法的话。
例：显示文本文件mydoc匹配（含有）字符串"sun"的所有行。
awk '/sun/' mydoc
由于显示整个记录（全行）是awk的缺省动作，因此可以省略action项。
awk '/sun/' mydoc
例：下面是一个较为复杂的匹配的示例：
awk '/[Ss]un/,/[Mm]oon/ ' myfile
它将显示所有匹配Sun或sun的行与匹配Moon或moon的行之间的行，并显示到标准输出上。
例：下面的示例显示了内置变量和内置函数length（）的使用：
awk 'length($0)>80 {print NR}' myfile
该命令行将显示文本myfile中所有超过80个字符的行号，在这里，用0表示整个记录（行），同时，内置变量NR不使用标志符''。
例：作为一个较为实际的例子，我们假设要对UNIX中的用户进行安全性检查，方法是考察/etc下的passwd文件，检查其中的passwd字段（第二字段）是否为"*"，如不为"*"，则表示该用户没有设置密码，显示出这些用户名（第一字段）。我们可以用如下语句实现：
#awk -F : '$2!="*" {printf("%s no password!\n",$1)}' /etc/passwd
在这个示例中，passwd文件的字段分隔符是“：”，因此，必须用-F：来更改默认的字段分隔符，这个示例中也涉及到了内置函数printf的使用。
变量

如同其它程序设计语言一样，awk允许在程序语言中设置变量，事实上，提供变量的功能是程序设计语言的基本要求。
awk 提供两种变量，一种是awk内置的变量，这前面我们已经讲过，需要着重指出的是，与后面提到的其它变量不同的是，在awk程序中引用内置变量不需要使用标志符""（回忆一下前面讲过的NR的使用）。awk提供的另一种变量是自定义变量。awk允许用户在awk程序语句中定义并调用自已的变量。当然这种变量不能与内置变量及其它awk保留字相同，在awk中引用自定义变量必须在它前面加上标志符""。与C语言不同的是，awk中不需要对变量进行初始化， awk根据其在awk中第一次出现的形式和上下文确定其具体的数据类型。当变量类型不确定时，awk默认其为字符串类型。这里有一个技巧：如果你要让你的 awk程序知道你所使用的变量的明确类型，你应当在在程序中给它赋初值。在后面的实例中，我们将用到这一技巧。
4运算与判断
编辑

作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的基本相同：如+、-、*、/、%等等，同时，awk也支持C语言中类似++、--、+=、-=、=+、=-之类的功能，这给熟悉C语言的使用者编写awk程序带来了极大的方便。作为对运算功能的一种扩展，awk还提供了一系列内置的运算函数（如log、sqr、cos、sin等等）和一些用于对字符串进行操作（运算）的函数（如length、substr等等）。这些函数的引用大大的提高了awk的运算功能。
作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，awk也不例外。awk 中允许进行多种测试，如常用的==（等于）、!=（不等于）、>（大于）、>=（大于等于）、<=（小于等于）等等，同时，作为样式匹配，还提供了~（匹配于）和！~（不匹配于）判断。
作为对测试的一种扩充，awk也支持用逻辑运算符：！（非）、&&；（与）、||（或）和括号（）进行多重判断，这大大增强了awk的功能。本文的附录中列出了awk所允许的运算、判断以及操作符的优先级。
5流程控制
编辑

流程控制语句是任何程序设计语言都不能缺少的部分。任何好的语言都有一些执行流程控制的语句。awk提供的完备的流程控制语句类似于C语言，这给我们编程带来了极大的方便。
1

在awk 中两个特别的表达式，BEGIN和END，这两者都可用于pattern中（参考前面的awk语法），提供BEGIN和END的作用是给程序赋予初始状态和在程序结束之后执行一些扫尾的工作。任何在BEGIN之后列出的操作（在{}内）将在awk开始扫描输入之前执行，而END之后列出的操作将在扫描完全部的输入之后执行。因此，通常使用BEGIN来显示变量和预置（初始化）变量，使用END来输出最终结果。
例：累计销售文件xs中的销售金额（假设销售金额在记录的第三字段）：
awk
>'BEGIN { FS=":";print "统计销售金额";total=0}
>{print $3;total=total+$3;}
>END {printf "销售金额总计：%.2f",total}' sx
（注：>；是shell提供的第二提示符，如要在shell程序awk语句和awk语言中换行，则需在行尾加反斜杠\）
在这里，BEGIN预置了内部变量FS（字段分隔符）和自定义变量total，同时在扫描之前显示出输出行头。而END则在扫描完成后打印出总合计。
2

awk提供了完备的流程控制语句，其用法与C语言类似。下面我们一一加以说明：
2.1、if...else语句：
格式：
if（表达式）
语句1
else
语句2
格式中"语句1"可以是多个语句，如果你为了方便awk判断也方便你自已阅读，你最好将多个语句用{}括起来。awk分枝结构允许嵌套，其格式为：
if（表达式1）
{if（表达式2）
语句1
else
语句2
}
语句3
else {if（表达式3）
语句4
else
语句5
}
语句6
当然实际操作过程中你可能不会用到如此复杂的分枝结构，这里只是为了给出其样式罢了。
2.2、while语句
格式为：
while（表达式）
语句
2.3、do-while语句
格式为：
do
{
语句
}while（条件判断语句）
2.4、for语句
格式为：
for（初始表达式；终止条件；步长表达式）
{语句}
在awk 的 while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用exit这样的语句来退出。break 中断当前正在执行的循环并跳到循环外执行下一条语句。continue从当前位置跳到循环开始处执行。对于exit的执行有两种情况：当exit语句不在 END中时，任何操作中的exit命令表现得如同到了文件尾，所有模式或操作执行将停止，END模式中的操作被执行。而出现在END中的exit将导致程序终止。
6函数
编辑

定义和调用用户自己的函数是几乎每个高级语言都具有的功能，awk也不例外，但原始的awk并不提供函数功能，只有在nawk或较新的awk版本中才可以增加函数。
函数的使用包含两部分：函数的定义与函数调用。其中函数定义又包括要执行的代码（函数本身）和从主程序代码传递到该函数的临时调用。
awk函数的定义方法如下：
function 函数名（参数表）{
函数体
}
在gawk中允许将function省略为func，但其它版本的awk不允许。函数名必须是一个合法的标志符，参数表中可以不提供参数（但在调用函数时函数名后的一对括号仍然是不可缺少的），也可以提供一个或多个参数。与C语言相似，awk的参数也是通过值来传递的。
在awk 中调用函数比较简单，其方法与C语言相似，但awk比C语言更为灵活，它不执行参数有效性检查。换句话说，在你调用函数时，可以列出比函数预计（函数定义中规定）的多或少的参数，多余的参数会被awk所忽略，而不足的参数，awk将它们置为缺省值0或空字符串，具体置为何值，将取决于参数的使用方式。
awk函数有两种返回方式：隐式返回和显式返回。当awk执行到函数的结尾时，它自动地返回到调用程序，这是函数是隐式返回的。如果需要在结束之前退出函数，可以明确地使用返回语句提前退出。方法是在函数中使用形如：return 返回值 格式的语句。
例：下面的例子演示了函数的使用。在这个示例中，定义了一个名为print_header的函数，该函数调用了两个参数FileName和 PageNum， FileName参数传给函数当前使用的文件名，PageNum参数是当前页的页号。这个函数的功能是打印（显示）出当前文件的文件名，和当前页的页号。完成这个功能后，这个函数将返回下一页的页号。
nawk
>'BEGIN{pageno=1;file=FILENAME
>pageno=print_header(file，pageno）；#调用函数print_header
>printf("当前页页号是：%d\n",pageno);
>}
>#定义函数print_header
>function print_header(FileName,PageNum){
>printf("%s %d\n",FileName,PageNum); >PageNum++;return PageNUm;
>}
>}' myfile
执行这个程序将显示如下内容：
myfile 1
当前页页号是：2
7输入输出
编辑

1.读取下一条记录：
awk的next语句导致awk读取下一个记录并完成模式匹配，然后立即执行相应的操作。通常它用匹配的模式执行操作中的代码。next导致这个记录的任何额外匹配模式被忽略。
2.简单地读取一条记录
awk 的 getline语句用于简单地读取一条记录。如果用户有一个数据记录类似两个物理记录，那么getline将尤其有用。它完成一般字段的分离（设置字段变量0FNRNF NR）。如果成功则返回1，失败则返回0（到达文件尾）。如果需简单地读取一个文件，则可以编写以下代码：
例：示例getline的使用
{while(getline==1）
{
#process the inputted fields
}
}
也可以使getline保存输入数据在一个字段中，而不是通过使用getline variable的形式处理一般字段。当使用这种方式时，NF被置成0，FNR和NR被增值。
用户也可以使用getline"datafile"
或
printf("hello word!\n"
>>"datafile"
3. 输出记录
可以通过print 和 printf 将结果输出：
awk '{ print $1,$2 }' file
4.输出到一个命令
awk中允许用如下方式将结果输出到一个命令：
printf("hello word!\n"
|"sort-t','"
awk与shell script混合编程
因为awk可以作为一个shell命令使用，因此awk能与shell批处理程序很好的融合在一起，这给实现awk与shell程序的混合编程提供了可能。实现混合编程的关键是awk与shell script之间的对话，换言之，就是awk与shell script之间的信息交流：awk从shell script中获取所需的信息（通常是变量的值）、在awk中执行shell命令行、shell script将命令执行的结果送给awk处理以及shell scrit读取awk的执行结果等等。
1.awk读取Shell script程序变量
在awk中我们可以通过“'$变量名'”的方式读取sell scrpit程序中的变量。
例：在下面的示例中，我们将读取sell scrpit程序中的变量Name，该变量存放的是文本myfile的撰写者，awk将打印出这个人名。
$cat writename
:
# @(#)
#
Name="张三" nawk 'BEGIN {name="'Name'";\ printf("\t%s\t撰写者%s\n",FILENAME,name");}\
{...}END{...}' myfile
2.将shell命令的执行结果送给awk处理
作为信息传送的一种方法，我们可以将一条shell命令的结果通过管道线（|）传递给awk处理：
例：示例awk处理shell命令的执行结果
$who -u | awk '{printf("%s正在执行%s\n",$2,$1)}'
该命令将打印出注册终端正在执行的程序名。
3.shell script程序读awk的执行结果
为了实现shell script程序读取awk执行的结果，我们可以采取一些特殊的方法，例如我们可以用变量名=`awk语句`的形式将awk执行的结果存放入一个shell script变量。当然也可以用管道线的方法将awk执行结果传递给shell script程序处理。
例：作为传送消息的机制之一，UNIX提供了一个向其所有用户传送消息的命令wall（意思是write to all写给所有用户），该命令允许向所有工作中的用户（终端）发送消息。为此，我们可以通过一段shell批处理程序wall.shell来模拟这一程序（事实上比较老的版本中wall就是一段shell批处理程序：
$cat wall.shell
:
# @(#) wall.shell:发送消息给每个已注册终端
#
cat >/tmp/$$
#用户录入消息文本who -u | awk '{print $2}' | while read tty
do
cat /tmp/$$>$tty
done
在这个程序里，awk接受who -u命令的执行结果，该命令打印出所有已注册终端的信息，其中第二个字段是已注册终端的设备名，因此用awk命令析出该设备名，然后用while read tty语句循环读出这些文件名到变量（shell script变量）tty中，作为信息传送的终结地址。
4.在awk中执行shell命令行----嵌入函数system()
system()是一个不适合字符或数字类型的嵌入函数，该函数的功能是处理作为参数传递给它的字符串。system对这个参数的处理就是将其作为命令处理，也就是说将其当作命令行一样加以执行。这使得用户在自己的awk程序需要时可以灵活地执行命令或脚本。
例：下面的程序将使用system嵌入函数打印用户编制好的报表文件，这个文件存放在名为myreport.txt的文件中。为简约起见，我们只列出了其END部分：
END {close("myreport.txt");system("lp myreport.txt");}
在这个示例中，我们首先使用close语句关闭了文件myreport.txt文件，然后使用system嵌入函数将myreport.txt送入打印机打印。

比较2个句子 查出共有单词
awk '{gsub(/[,.]/,"",$0)}NR==FNR{for (i=1;i<=NF;i++)  a[$i]++;next}{for (i=1;i<=NF;i++) if (a[$i]>0) print $i}' 1 2|sort -u
awk 'for(i=1;i<=NF;i++)if($i=="-sql")echo $++i' findsql -sid sidval -sql sqlval -app appval


awk 用法：awk ' pattern {action} '  

变量名    含义 
ARGC   命令行变元个数 
ARGV   命令行变元数组 
FILENAME   当前输入文件名 
FNR   当前文件中的记录号 
FS   输入域分隔符，默认为一个空格 
RS   输入记录分隔符 
NF   当前记录里域个数 
NR   到目前为止记录数 
OFS   输出域分隔符 
ORS   输出记录分隔符 

1、awk '/101/'    file      显示文件file中包含101的匹配行。 
   awk '/101/,/105/'  file 
   awk '$1 == 5'    file 
   awk '$1 == "CT"'    file    注意必须带双引号 
   awk '$1 * $2 >100 '   file  
   awk '$2 >5 && $2<=15'  file 


2、awk '{print NR,NF,$1,$NF,}' file     显示文件file的当前记录号、域数和每一行的第一个和最后一个域。 
   awk '/101/ {print $1,$2 + 10}' file       显示文件file的匹配行的第一、二个域加10。 
   awk '/101/ {print $1$2}'  file 
   awk '/101/ {print $1 $2}' file       显示文件file的匹配行的第一、二个域，但显示时域中间没有分隔符。 


3、df | awk '$4>1000000 '         通过管道符获得输入，如：显示第4个域满足条件的行。 


4、awk -F "|" '{print $1}'   file         按照新的分隔符“|”进行操作。 
   awk  'BEGIN { FS="[: \t|]" } 
   {print $1,$2,$3}'       file         通过设置输入分隔符（FS="[: \t|]"）修改输入分隔符。 

   Sep="|" 
   awk -F $Sep '{print $1}'  file   按照环境变量Sep的值做为分隔符。    
   awk -F '[ :\t|]' '{print $1}' file   按照正则表达式的值做为分隔符，这里代表空格、:、TAB、|同时做为分隔符。 
   awk -F '[][]'    '{print $1}' file   按照正则表达式的值做为分隔符，这里代表[、] 


5、awk -f awkfile    file         通过文件awkfile的内容依次进行控制。 
   cat awkfile 
/101/{print "\047 Hello! \047"}    --遇到匹配行以后打印 ' Hello! '.\047代表单引号。 
{print $1,$2}                      --因为没有模式控制，打印每一行的前两个域。 


6、awk '$1 ~ /101/ {print $1}' file         显示文件中第一个域匹配101的行（记录）。 


7、awk   'BEGIN { OFS="%"} 
   {print $1,$2}'  file           通过设置输出分隔符（OFS="%"）修改输出格式。 


8、awk   'BEGIN { max=100 ;print "max=" max}             BEGIN 表示在处理任意行之前进行的操作。 
   {max=($1 >max ?$1:max); print $1,"Now max is "max}' file           取得文件第一个域的最大值。 
   awk '{print ($1>4 ? "high "$1: "low "$1)}' file  


9、awk '$1 * $2 >100 {print $1}' file         显示文件中第一个域匹配101的行（记录）。 


10、awk '{$1 == 'Chi' {$3 = 'China'; print}' file        找到匹配行后先将第3个域替换后再显示该行（记录）。 
	awk '{$7 %= 3; print $7}'  file           将第7域被3除，并将余数赋给第7域再打印。 


11、awk '/tom/ {wage=$2+$3; printf wage}' file          找到匹配行后为变量wage赋值并打印该变量。


12、awk '/tom/ {count++;}  
		 END {print "tom was found "count" times"}' file            END表示在所有输入行处理完后进行处理。 


13、awk 'gsub(/\$/,"");gsub(/,/,""); cost+=$4; 
		 END {print "The total is $" cost>"filename"}'    file             gsub函数用空串替换$和,再将结果输出到filename中。 
	1 2 3 $1,200.00 
	1 2 3 $2,300.00 
	1 2 3 $4,000.00 

	awk '{gsub(/\$/,"");gsub(/,/,""); 
	if ($4>1000&&$4<2000) c1+=$4; 
	else if ($4>2000&&$4<3000) c2+=$4; 
	else if ($4>3000&&$4<4000) c3+=$4; 
	else c4+=$4; } 
	END {printf  "c1=[%d];c2=[%d];c3=[%d];c4=[%d]\n",c1,c2,c3,c4}"' file 
	通过if和else if完成条件语句 

	awk '{gsub(/\$/,"");gsub(/,/,""); 
	if ($4>3000&&$4<4000) exit; 
	else c4+=$4; } 
	END {printf  "c1=[%d];c2=[%d];c3=[%d];c4=[%d]\n",c1,c2,c3,c4}"' file 
	通过exit在某条件时退出，但是仍执行END操作。 
	awk '{gsub(/\$/,"");gsub(/,/,""); 
	if ($4>3000) next; 
	else c4+=$4; } 
	END {printf  "c4=[%d]\n",c4}"' file 
	通过next在某条件时跳过该行，对下一行执行操作。 


14、awk '{ print FILENAME,$0 }' file1 file2 file3>fileall              把file1、file2、file3的文件内容全部写到fileall中，格式为 
	打印文件并前置文件名。 


15、awk ' $1!=previous { close(previous); previous=$1 }    
	{print substr($0,index($0," ") +1)>$1}' fileall           把合并后的文件重新分拆为3个文件。并与原文件一致。 


16、awk 'BEGIN {"date"|getline d; print d}'         通过管道把date的执行结果送给getline，并赋给变量d，然后打印。  


17、awk 'BEGIN {system("echo \"Input your name:\\c\""); getline d;print "\nYour name is",d,"\b!\n"}' 
	通过getline命令交互输入name，并显示出来。 
	awk 'BEGIN {FS=":"; while(getline< "/etc/passwd" >0) { if($1~"050[0-9]_") print $1}}' 
	打印/etc/passwd文件中用户名包含050x_的用户名。 

18、awk '{ i=1;while(i<NF) {print NF,$i;i++}}' file 通过while语句实现循环。 
	awk '{ for(i=1;i<NF;i++) {print NF,$i}}'   file 通过for语句实现循环。     
	type file|awk -F "/" ' 
	{ for(i=1;i<NF;i++) 
	{ if(i==NF-1) { printf "%s",$i } 
	else { printf "%s/",$i } }}'               显示一个文件的全路径。 
	用for和if显示日期 
	awk  'BEGIN { 
for(j=1;j<=12;j++) 
{ flag=0; 
  printf "\n%d月份\n",j; 
		for(i=1;i<=31;i++) 
		{ 
		if (j==2&&i>28) flag=1; 
		if ((j==4||j==6||j==9||j==11)&&i>30) flag=1; 
		if (flag==0) {printf "%02d%02d ",j,i} 
		} 
} 
}' 


19、在awk中调用系统变量必须用单引号，如果是双引号，则表示字符串 
Flag=abcd 
awk '{print '$Flag'}'   结果为abcd 
awk '{print  "$Flag"}'   结果为$Flag

===============================


	$awk 'BEGIN{total=0}{total+=$4}END{print total}' a.txt   -----对a.txt文件的第四个域进行求和！



•$ awk '/^(no|so)/' test      -----打印所有以模式no或so开头的行。


•$ awk '/^[ns]/{print $1}' test       -----如果记录以n或s开头，就打印这个记录。


•$ awk '$1 ~/[0-9][0-9]$/(print $1}' test         -----如果第一个域以两个数字结束就打印这个记录。


•$ awk '$1 == 100 || $2 < 50' test      -----如果第一个或等于100或者第二个域小于50，则打印该行。


•$ awk '$1 != 10' test    -----如果第一个域不等于10就打印该行。


•$ awk '/test/{print $1 + 10}' test  -----如果记录包含正则表达式test，则第一个域加10并打印出来。


•$ awk '{print ($1 > 5 ? "ok "$1: "error"$1)}' test   -----如果第一个域大于5则打印问号后面的表达式值，否则打印冒号后面的表达式值。


•$ awk '/^root/,/^mysql/' test        ----打印以正则表达式root开头的记录到以正则表达式mysql开头的记录范围内的所有记录。如果找到一个新的正则表达式root开头的记录，则继续打印直到下一个以正则表达式mysql开头的记录为止，或到文件末尾。


===============================


Table of Contents
1. awk简介2. awk命令格式和选项2.1. awk的语法有两种形式2.2. 命令选项3. 模式和操作3.1. 模式3.2. 操作4. awk的环境变量5. awk运算符6. 记录和域6.1. 记录6.2. 域6.3. 域分隔符7. gawk专用正则表达式元字符8. POSIX字符集9. 匹配操作符(~)10. 比较表达式11. 范围模板12. 一个验证passwd文件有效性的例子13. 几个实例14. awk编程14.1. 变量14.2. BEGIN模块14.3. END模块14.4. 重定向和管道14.5. 条件语句14.6. 循环14.7. 数组14.8. awk的内建函数15. How-to




1. awk简介

awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk的处理文本和数据的方式是这样的，它逐行扫描文件，从第一行到最后一行，寻找匹配的特定模式的行，并在这些行上进行你想要的操作。如果没有指定处理动作，则把匹配的行显示到标准输出(屏幕)，如果没有指定模式，则所有被操作所指定的行都被处理。awk分别代表其作者姓氏的第一个字母。因为它的作者是三个人，分别是Alfred Aho、Brian Kernighan、Peter Weinberger。gawk是awk的GNU版本，它提供了Bell实验室和GNU的一些扩展。下面介绍的awk是以GUN的gawk为例的，在linux系统中已把awk链接到gawk，所以下面全部以awk进行介绍。





2. awk命令格式和选项





2.1. awk的语法有两种形式


•awk [options] 'script' var=value file(s)


•awk [options] -f scriptfile var=value file(s)






2.2. 命令选项

-F fs or --field-separator fs
指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。
-v var=value or --asign var=value
赋值一个用户定义变量。
-f scripfile or --file scriptfile
从脚本文件中读取awk命令。
-mf nnn and -mr nnn
对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。
-W compact or --compat, -W traditional or --traditional
在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。
-W copyleft or --copyleft, -W copyright or --copyright
打印简短的版权信息。
-W help or --help, -W usage or --usage
打印全部awk选项和每个选项的简短说明。
-W lint or --lint
打印不能向传统unix平台移植的结构的警告。
-W lint-old or --lint-old
打印关于不能向传统unix平台移植的结构的警告。
-W posix
打开兼容模式。但有以下限制，不识别：\x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符**和**=不能代替^和^=；fflush无效。
-W re-interval or --re-inerval
允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。
-W source program-text or --source program-text
使用program-text作为源代码，可与-f命令混用。
-W version or --version
打印bug报告信息的版本。





3. 模式和操作

awk脚本是由模式和操作组成的：
pattern {action} 如$ awk '/root/' test，或$ awk '$3 < 100' test。

两者是可选的，如果没有模式，则action应用到全部记录，如果没有action，则输出匹配全部记录。默认情况下，每一个输入行都是一条记录，但用户可通过RS变量指定不同的分隔符进行分隔。





3.1. 模式

模式可以是以下任意一个：


•/正则表达式/：使用通配符的扩展集。


•关系表达式：可以用下面运算符表中的关系运算符进行操作，可以是字符串或数字的比较，如$2>%1选择第二个字段比第一个字段长的行。


•模式匹配表达式：用运算符~(匹配)和~!(不匹配)。


•模式，模式：指定一个行的范围。该语法不能包括BEGIN和END模式。


•BEGIN：让用户指定在第一条输入记录被处理之前所发生的动作，通常可在这里设置全局变量。


•END：让用户在最后一条输入记录被读取之后发生的动作。






3.2. 操作

操作由一人或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内。主要有四部份：


•变量或数组赋值


•输出命令


•内置函数


•控制流命令






4. awk的环境变量

 
Table 1. awk的环境变量





变量

描述


$n 当前记录的第n个字段，字段间由FS分隔。 
$0 完整的输入记录。 
ARGC 命令行参数的数目。 
ARGIND 命令行中当前文件的位置(从0开始算)。 
ARGV 包含命令行参数的数组。 
CONVFMT 数字转换格式(默认值为%.6g) 
ENVIRON 环境变量关联数组。 
ERRNO 最后一个系统错误的描述。 
FIELDWIDTHS 字段宽度列表(用空格键分隔)。 
FILENAME 当前文件名。 
FNR 同NR，但相对于当前文件。 
FS 字段分隔符(默认是任何空格)。 
IGNORECASE 如果为真，则进行忽略大小写的匹配。 
NF 当前记录中的字段数。 
NR 当前记录数。 
OFMT 数字的输出格式(默认值是%.6g)。 
OFS 输出字段分隔符(默认值是一个空格)。 
ORS 输出记录分隔符(默认值是一个换行符)。 
RLENGTH 由match函数所匹配的字符串的长度。 
RS 记录分隔符(默认是一个换行符)。 
RSTART 由match函数所匹配的字符串的第一个位置。 
SUBSEP 数组下标分隔符(默认值是\034)。 





5. awk运算符

 
Table 2. 运算符





运算符

描述


= += -= *= /= %= ^= **= 赋值 
?: C条件表达式 
|| 逻辑或 
&& 逻辑与 
~ ~! 匹配正则表达式和不匹配正则表达式 
< <= > >= != == 关系运算符 
空格 连接 
+ - 加，减 
* / & 乘，除与求余 
+ - ! 一元加，减和逻辑非 
^ *** 求幂 
++ -- 增加或减少，作为前缀或后缀 
$ 字段引用 
in 数组成员 





6. 记录和域





6.1. 记录

awk把每一个以换行符结束的行称为一个记录。

记录分隔符：默认的输入和输出的分隔符都是回车，保存在内建变量ORS和RS中。

$0变量：它指的是整条记录。如$ awk '{print $0}' test将输出test文件中的所有记录。

变量NR：一个计数器，每处理完一条记录，NR的值就增加1。如$ awk '{print NR,$0}' test将输出test文件中所有记录，并在记录前显示记录号。





6.2. 域

记录中每个单词称做“域”，默认情况下以空格或tab分隔。awk可跟踪域的个数，并在内建变量NF中保存该值。如$ awk '{print $1,$3}' test将打印test文件中第一和第三个以空格分开的列(域)。





6.3. 域分隔符

内建变量FS保存输入域分隔符的值，默认是空格或tab。我们可以通过-F命令行选项修改FS的值。如$ awk -F: '{print $1,$5}' test将打印以冒号为分隔符的第一，第五列的内容。

可以同时使用多个域分隔符，这时应该把分隔符写成放到方括号中，如$awk -F'[:\t]' '{print $1,$3}' test，表示以空格、冒号和tab作为分隔符。

输出域的分隔符默认是一个空格，保存在OFS中。如$ awk -F: '{print $1,$5}' test，$1和$5间的逗号就是OFS的值。





7. gawk专用正则表达式元字符

以下几个是gawk专用的，不适合unix版本的awk。

\Y
匹配一个单词开头或者末尾的空字符串。
\B
匹配单词内的空字符串。
\<
匹配一个单词的开头的空字符串，锚定开始。
\>
匹配一个单词的末尾的空字符串，锚定末尾。
\w
匹配一个字母数字组成的单词。
\W
匹配一个非字母数字组成的单词。
\‘
匹配字符串开头的一个空字符串。
\'
匹配字符串末尾的一个空字符串。





8. POSIX字符集

 





9. 匹配操作符(~)

用来在记录或者域内匹配正则表达式。如$ awk '$1 ~/^root/' test将显示test文件第一列中以root开头的行。





10. 比较表达式

conditional expression1 ? expression2: expression3，例如：$ awk '{max = {$1 > $3} ? $1: $3: print max}' test。如果第一个域大于第三个域，$1就赋值给max，否则$3就赋值给max。

$ awk '$1 + $2 < 100' test。如果第一和第二个域相加大于100，则打印这些行。

$ awk '$1 > 5 && $2 < 10' test,如果第一个域大于5，并且第二个域小于10，则打印这些行。





11. 范围模板

范围模板匹配从第一个模板的第一次出现到第二个模板的第一次出现之间所有行。如果有一个模板没出现，则匹配到开头或末尾。如$ awk '/root/,/mysql/' test将显示root第一次出现到mysql第一次出现之间的所有行。





12. 一个验证passwd文件有效性的例子
$ cat /etc/passwd | awk -F: '\
NF != 7{\
printf("line %d,does not have 7 fields:%s\n",NR,$0)}\
$1 !~ /[A-Za-z0-9]/{printf("line %d,non alpha and numeric user id:%d: %s\n,NR,$0)}\
$2 == "*" {printf("line %d, no password: %s\n",NR,$0)}' 

1 
cat把结果输出给awk，awk把域之间的分隔符设为冒号。
 
2 
如果域的数量(NF)不等于7，就执行下面的程序。
 
3 
printf打印字符串"line ?? does not have 7 fields"，并显示该条记录。
 
4 
如果第一个域没有包含任何字母和数字，printf打印"no alpha and numeric user id" 并显示记录数和记录。
 
5 
如果第二个域是一个星号，就打印字符串“no passwd”，紧跟着显示记录数和记录本身。
 





13. 几个实例


•$ awk '/^(no|so)/' test-----打印所有以模式no或so开头的行。


•$ awk '/^[ns]/{print $1}' test-----如果记录以n或s开头，就打印这个记录。


•$ awk '$1 ~/[0-9][0-9]$/(print $1}' test-----如果第一个域以两个数字结束就打印这个记录。


•$ awk '$1 == 100 || $2 < 50' test-----如果第一个或等于100或者第二个域小于50，则打印该行。


•$ awk '$1 != 10' test-----如果第一个域不等于10就打印该行。


•$ awk '/test/{print $1 + 10}' test-----如果记录包含正则表达式test，则第一个域加10并打印出来。


•$ awk '{print ($1 > 5 ? "ok "$1: "error"$1)}' test-----如果第一个域大于5则打印问号后面的表达式值，否则打印冒号后面的表达式值。


•$ awk '/^root/,/^mysql/' test----打印以正则表达式root开头的记录到以正则表达式mysql开头的记录范围内的所有记录。如果找到一个新的正则表达式root开头的记录，则继续打印直到下一个以正则表达式mysql开头的记录为止，或到文件末尾。






14. awk编程





14.1. 变量


•在awk中，变量不需要定义就可以直接使用，变量类型可以是数字或字符串。


•赋值格式：Variable = expression，如$ awk '$1 ~/test/{count = $2 + $3; print count}' test,上式的作用是,awk先扫描第一个域，一旦test匹配，就把第二个域的值加上第三个域的值，并把结果赋值给变量count，最后打印出来。


•awk可以在命令行中给变量赋值，然后将这个变量传输给awk脚本。如$ awk -F: -f awkscript month=4 year=2004 test，上式的month和year都是自定义变量，分别被赋值为4和2004。在awk脚本中，这些变量使用起来就象是在脚本中建立的一样。注意，如果参数前面出现test，那么在BEGIN语句中的变量就不能被使用。


•域变量也可被赋值和修改，如$ awk '{$2 = 100 + $1; print }' test,上式表示，如果第二个域不存在，awk将计算表达式100加$1的值，并将其赋值给$2，如果第二个域存在，则用表达式的值覆盖$2原来的值。再例如：$ awk '$1 == "root"{$1 ="test";print}' test，如果第一个域的值是“root”，则把它赋值为“test”，注意，字符串一定要用双引号。


•内建变量的使用。变量列表在前面已列出，现在举个例子说明一下。$ awk -F: '{IGNORECASE=1; $1 == "MARY"{print NR,$1,$2,$NF}'test，把IGNORECASE设为1代表忽略大小写，打印第一个域是mary的记录数、第一个域、第二个域和最后一个域。






14.2. BEGIN模块

BEGIN模块后紧跟着动作块，这个动作块在awk处理任何输入文件之前执行。所以它可以在没有任何输入的情况下进行测试。它通常用来改变内建变量的值，如OFS,RS和FS等，以及打印标题。如：$ awk 'BEGIN{FS=":"; OFS="\t"; ORS="\n\n"}{print $1,$2,$3} test。上式表示，在处理输入文件以前，域分隔符(FS)被设为冒号，输出文件分隔符(OFS)被设置为制表符，输出记录分隔符(ORS)被设置为两个换行符。$ awk 'BEGIN{print "TITLE TEST"}只打印标题。





14.3. END模块

END不匹配任何的输入文件，但是执行动作块中的所有动作，它在整个输入文件处理完成后被执行。如$ awk 'END{print "The number of records is" NR}' test，上式将打印所有被处理的记录数。





14.4. 重定向和管道


•awk可使用shell的重定向符进行重定向输出，如：$ awk '$1 = 100 {print $1 > "output_file" }' test。上式表示如果第一个域的值等于100，则把它输出到output_file中。也可以用>>来重定向输出，但不清空文件，只做追加操作。


•输出重定向需用到getline函数。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。如：

$ awk 'BEGIN{ "date" | getline d; print d}' test。执行linux的date命令，并通过管道输出给getline，然后再把输出赋值给自定义变量d，并打印它。

$ awk 'BEGIN{"date" | getline d; split(d,mon); print mon[2]}' test。执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给d，split函数把变量d转化成数组mon，然后打印数组mon的第二个元素。

$ awk 'BEGIN{while( "ls" | getline) print}'，命令ls的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。这里没有输入文件，因为BEGIN块在打开输入文件前执行，所以可以忽略输入文件。

$ awk 'BEGIN{printf "What is your name?"; getline name < "/dev/tty" } $1 ~name {print "Found" name on line ", NR "."} END{print "See you," name "."} test。在屏幕上打印”What is your name?",并等待用户应答。当一行输入完毕后，getline函数从终端接收该行输入，并把它储存在自定义变量name中。如果第一个域匹配变量name的值，print函数就被执行，END块打印See you和name的值。

$ awk 'BEGIN{while (getline < "/etc/passwd" > 0) lc++; print lc}'。awk将逐行读取文件/etc/passwd的内容，在到达文件末尾前，计数器lc一直增加，当到末尾时，打印lc的值。注意，如果文件不存在，getline返回-1，如果到达文件的末尾就返回0，如果读到一行，就返回1，所以命令 while (getline < "/etc/passwd")在文件不存在的情况下将陷入无限循环，因为返回-1表示逻辑真。


•可以在awk中打开一个管道，且同一时刻只能有一个管道存在。通过close()可关闭管道。如：$ awk '{print $1, $2 | "sort" }' test END {close("sort")}。awd把print语句的输出通过管道作为linux命令sort的输入,END块执行关闭管道操作。


•system函数可以在awk中执行linux的命令。如：$ awk 'BEGIN{system("clear")'。


•fflush函数用以刷新输出缓冲区，如果没有参数，就刷新标准输出的缓冲区，如果以空字符串为参数，如fflush(""),则刷新所有文件和管道的输出缓冲区。






14.5. 条件语句

awk中的条件语句是从C语言中借鉴过来的，可控制程序的流程。





14.5.1. if 语句
格式：
		{if (expression){
				   statement; statement; ...
					 }
		}

$ awk '{if ($1 <$2) print $2 "too high"}' test。如果第一个域小于第二个域则打印。

$ awk '{if ($1 < $2) {count++; print "ok"}}' test.如果第一个域小于第二个域，则count加一，并打印ok。





14.5.2. if/else语句，用于双重判断
格式：
		{if (expression){
				   statement; statement; ...
					   }
		else{
				   statement; statement; ...
					   }
		}

$ awk '{if ($1 > 100) print $1 "bad" ; else print "ok"}' test。如果$1大于100则打印$1 bad,否则打印ok。

$ awk '{if ($1 > 100){ count++; print $1} else {count--; print $2}' test。如果$1大于100，则count加一，并打印$1，否则count减一，并打印$1。





14.5.3. if/else else if语句，用于多重判断。
格式：
		{if (expression){
					statement; statement; ...
				   }
		else if (expression){
					statement; statement; ...
				   }
		else if (expression){
					statement; statement; ...
				   }
		else {
				   statement; statement; ...
			 }
		}





14.6. 循环


•awk有三种循环: while循环；for循环；special for循环。


•$ awk '{ i = 1; while ( i <= NF ) { print NF,$i; i++}}' test。变量的初始值为1，若i小于可等于NF(记录中域的个数),则执行打印语句，且i增加1。直到i的值大于NF.


•$ awk '{for (i = 1; i<NF; i++) print NF,$i}' test。作用同上。


•bread continue 语句。break用于在满足条件的情况下跳出循环；continue用于在满足条件的情况下忽略后面的语句，直接返回循环的顶端。如：
{for ( x=3; x<=NF; x++) 
			if ($x<0){print "Bottomed out!"; break}}
{for ( x=3; x<=NF; x++)
			if ($x==0){print "Get next item"; continue}}
	  


•next 语句从输入文件中读取一行，然后从头开始执行awk脚本。如：
{if ($1 ~/test/){next}
	else {print}
}
	 


•exit 语句用于结束awk程序，但不会略过END块。退出状态为0代表成功，非零值表示出错。






14.7. 数组

awk中的数组的下标可以是数字和字母，称为关联数组。





14.7.1. 下标与关联数组


•用变量作为数组下标。如：$ awk {name[x++]=$2};END{for(i=0;i<NR;i++) print i,name[i]}' test。数组name中的下标是一个自定义变量x，awk初始化x的值为0，在每次使用后增加1。第二个域的值被赋给name数组的各个元素。在END模块中，for循环被用于循环整个数组，从下标为0的元素开始，打印那些存储在数组中的值。因为下标是关健字，所以它不一定从0开始，可以从任何值开始。


•special for 循环用于读取关联数组中的元素。格式如下：
{for (item in arrayname){
		 print arrayname[item]
		 }
}

$ awk '/^tom/{name[NR]=$1}; END{for(i in name){print name[i]}}' test。打印有值的数组元素。打印的顺序是随机的。

•用字符串作为下标。如：count["test"]


•用域值作为数组的下标。一种新的for循环方式，for (index_value in array) statement。如:$ awk '{count[$1]++} END{for(name in count) print name,count[name]}' test。该语句将打印$1中字符串出现的次数。它首先以第一个域作数组count的下标，第一个域变化，索引就变化。


•delete 函数用于删除数组元素。如：$ awk '{line[x++]=$1} END{for(x in line) delete(line[x])}' test。分配给数组line的是第一个域的值，所有记录处理完成后，special for循环将删除每一个元素。






14.8. awk的内建函数





14.8.1. 字符串函数


•sub 函数匹配记录中最大、最靠左边的子字符串的正则表达式，并用替换字符串替换这些字符串。如果没有指定目标字符串就默认使用整个记录。替换只发生在第一次匹配的时候。格式如下：
			sub (regular expression, substitution string):
			sub (regular expression, substitution string, target string)


实例：
			$ awk '{ sub(/test/, "mytest"); print }' testfile
			$ awk '{ sub(/test/, "mytest"); $1}; print }' testfile


第一个例子在整个记录中匹配，替换只发生在第一次匹配发生的时候。如要在整个文件中进行匹配需要用到gsub

第二个例子在整个记录的第一个域中进行匹配，替换只发生在第一次匹配发生的时候。


•gsub 函数作用如sub，但它在整个文档中进行匹配。格式如下：
			gsub (regular expression, substitution string)
			gsub (regular expression, substitution string, target string)


实例：
			$ awk '{ gsub(/test/, "mytest"); print }' testfile
			$ awk '{ gsub(/test/, "mytest" , $1) }; print }' testfile


第一个例子在整个文档中匹配test，匹配的都被替换成mytest。

第二个例子在整个文档的第一个域中匹配，所有匹配的都被替换成mytest。


•index 函数返回子字符串第一次被匹配的位置，偏移量从位置1开始。格式如下：
		  index(string, substring)


实例：
			$ awk '{ print index("test", "mytest") }' testfile


实例返回test在mytest的位置，结果应该是3。


•length 函数返回记录的字符数。格式如下：
			length( string )
			length


实例：
			$ awk '{ print length( "test" ) }' 
			$ awk '{ print length }' testfile


第一个实例返回test字符串的长度。

第二个实例返回testfile文件中第条记录的字符数。


•substr 函数返回从位置1开始的子字符串，如果指定长度超过实际长度，就返回整个字符串。格式如下：
			substr( string, starting position )
			substr( string, starting position, length of string )


实例：
			$ awk '{ print substr( "hello world", 7,11 ) }' 


上例截取了world子字符串。


•match 函数返回在字符串中正则表达式位置的索引，如果找不到指定的正则表达式则返回0。match函数会设置内建变量RSTART为字符串中子字符串的开始位置，RLENGTH为到子字符串末尾的字符个数。substr可利于这些变量来截取字符串。函数格式如下：
			match( string, regular expression )


实例：
			$ awk '{start=match("this is a test",/[a-z]+$/); print start}'
			$ awk '{start=match("this is a test",/[a-z]+$/); print start, RSTART, RLENGTH }'


第一个实例打印以连续小写字符结尾的开始位置，这里是11。

第二个实例还打印RSTART和RLENGTH变量，这里是11(start)，11(RSTART)，4(RLENGTH)。


•toupper 和tolower 函数可用于字符串大小间的转换，该功能只在gawk中有效。格式如下：
			toupper( string )
			tolower( string )


实例：
			$ awk '{ print toupper("test"), tolower("TEST") }'



•split 函数可按给定的分隔符把字符串分割为一个数组。如果分隔符没提供，则按当前FS值进行分割。格式如下：
			split( string, array, field separator )
			split( string, array )


实例：
			$ awk '{ split( "20:18:00", time, ":" ); print time[2] }'


上例把时间按冒号分割到time数组内，并显示第二个数组元素18。






14.8.2. 时间函数


•systime函数返回从1970年1月1日开始到当前时间(不计闰年)的整秒数。格式如下：
			systime()


实例：
			$ awk '{ now = systime(); print now }'



•strftime函数使用C库中的strftime函数格式化时间。格式如下：
			systime( [format specification][,timestamp] )


 
Table 3. 日期和时间格式说明符





格式

描述


%a 星期几的缩写(Sun) 
%A 星期几的完整写法(Sunday) 
%b 月名的缩写(Oct) 
%B 月名的完整写法(October) 
%c 本地日期和时间 
%d 十进制日期 
%D 日期 08/20/99 
%e 日期，如果只有一位会补上一个空格 
%H 用十进制表示24小时格式的小时 
%I 用十进制表示12小时格式的小时 
%j 从1月1日起一年中的第几天 
%m 十进制表示的月份 
%M 十进制表示的分钟 
%p 12小时表示法(AM/PM) 
%S 十进制表示的秒 
%U 十进制表示的一年中的第几个星期(星期天作为一个星期的开始) 
%w 十进制表示的星期几(星期天是0) 
%W 十进制表示的一年中的第几个星期(星期一作为一个星期的开始) 
%x 重新设置本地日期(08/20/99) 
%X 重新设置本地时间(12：00：00) 
%y 两位数字表示的年(99) 
%Y 当前月份 
%Z 时区(PDT) 
%% 百分号(%) 

实例：
			$ awk '{ now=strftime( "%D", systime() ); print now }'
			$ awk '{ now=strftime("%m/%d/%y"); print now }'







14.8.3. 内建数学函数

 
Table 4. 





函数名称

返回值


atan2(x,y) y,x范围内的余切 
cos(x) 余弦函数 
exp(x) 求幂 
int(x) 取整 
log(x) 自然对数 
rand() 随机数 
sin(x) 正弦 
sqrt(x) 平方根 
srand(x) x是rand()函数的种子 
int(x) 取整，过程没有舍入 
rand() 产生一个大于等于0而小于1的随机数 





14.8.4. 自定义函数

在awk中还可自定义函数，格式如下：
		function name ( parameter, parameter, parameter, ... ) {
						statements
						return expression                  # the return statement and expression are optional
		}






15. How-to


•如何把一行竖排的数据转换成横排？

awk '{printf("%s,",$1)}' filename


 

awk中使用NR和FNR的一些例子

http://blog.sina.com.cn/s/blog_5a3640220100b7c8.html

http://www.linuxidc.com/Linux/2012-05/61174.htm

一般在awk里面输入文件是多个时，NR==FNR才有意义，如果这个值为true，表示还在处理第一个文件。

NR==FNR 這個一般用於讀取兩個或者兩個以上的文件中，用於判斷是在讀取第一個文件。。

test.txt   10行内容

test2.txt    4行内容

awk '{print NR,FNR}' test.txt test2.txt
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
11 1
12 2
13 3
14 4

 

现在有两个文件格式如下：

#cat account
张三|000001
李四|000002
#cat cdr
000001|10
000001|20
000002|30
000002|15

想要得到的结果是将用户名，帐号和金额在同一行打印出来,如下:

张三|000001|10
张三|000001|20
李四|000002|30
李四|000002|15

执行如下代码

#awk -F \| 'NR==FNR{a[$2]=$0;next}{print a[$1]"|"$2}' account cdr

注释:

由NR=FNR为真时,判断当前读入的是第一个文件account,然后使用{a[$2]=$0;next}循环将account文件的每行记录都存入数组a,并使用$2第2个字段作为下标引用.

由NR=FNR为假时,判断当前读入了第二个文件cdr,然后跳过{a[$2]=$0;next},对第二个文件cdr的每一行都无条件执行 {print a[$1]"|"$2},此时变量$1为第二个文件的第一个字段,与读入第一个文件时,采用第一个文件第二个字段$2为数组下标相同.因此可以在此使用 a[$1]引用数组。

 
awk '{gsub(/\$/,"");gsub(/,/,"");
if ($1>=0.1 && $1<0.2) c1+=1;
else if ($1>=0.2 && $1<0.3) c2+=1;
else if ($1>=0.3 && $1<0.4) c3+=1;
else if ($1>=0.4 && $1<0.5) c4+=1;
else if ($1>=0.5 && $1<0.6) c5+=1;
else if ($1>=0.6 && $1<0.7) c6+=1;
else if ($1>=0.7 && $1<0.8) c7+=1;
else if ($1>=0.8 && $1<0.9) c8+=1;
else if ($1>=0.9 ) c9+=1;
else c10+=1; }
END {printf  "%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t",c1,c2,c3,c4,c5,c6,c7,c8,c9,c10} ' /NEW

 

示例/例子：

awk '{if($0~/^>.*$/) {tmp=$0; getline; if( length($0)>=200) {print  tmp"\n"$0; } }}'  filename

awk '{if($0~/^>.*$/) {IGNORECASE=1; if($0~/PREDICTED/) {getline;} else {print $0; getline;  print $0; } }}' filename

awk '{if($0~/^>.*$/) {IGNORECASE=1; if($0~/mRNA/) {print $0; getline;  print $0; } else {getline;} }}'  filename

awk '{ temp=$0; getline; if($0~/unavailable/) {;} else {print temp"\n"$0;} }' filename

 

substr($4,20)     --->  表示是从第4个字段里的第20个字符开始，一直到设定的分隔符","结束.

substr($3,12,8)  --->  表示是从第3个字段里的第12个字符开始，截取8个字符结束.
